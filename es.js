// Generated by CoffeeScript 1.6.3
(function() {
  var async, bkp, bulk, copy, count, createIndex, deleteIndex, extend, fs, getIndex, map, query, req, setConfig, _config, _r_oper;

  async = require("async");

  fs = require("fs");

  req = require("request");

  extend = require("util")._extend;

  _config = null;

  setConfig = function(config) {
    return _config = config;
  };

  bulk = function(opts, docs, done) {
    var action, doc, index, obj, res, type, _doc, _i, _len;
    if (!Array.isArray(docs)) {
      done("docs not array");
    }
    if (!docs.length) {
      done(null, []);
      return;
    }
    res = "";
    for (_i = 0, _len = docs.length; _i < _len; _i++) {
      doc = docs[_i];
      obj = {};
      index = doc._index;
      if (index == null) {
        index = opts.index;
      }
      if (opts.index_prefix) {
        index = opts.index_prefix + "." + index;
      }
      action = doc._action ? doc._action : (opts.action ? opts.action : "index");
      type = doc._type ? doc._type : opts.type;
      obj[action] = {
        _index: index,
        _type: type,
        _id: doc._id
      };
      res += JSON.stringify(obj);
      res += "\r\n";
      _doc = extend({}, doc);
      delete _doc._id;
      delete _doc._index;
      delete _doc._type;
      delete _doc._action;
      res += JSON.stringify(_doc);
      res += "\r\n";
    }
    return _r_oper({
      uri: opts.uri,
      oper: "_bulk",
      method: "post",
      body: res
    }, done);
  };

  map = function(uri, fromIndex, toIndex, docsCount, map, done) {
    if (docsCount == null) {
      docsCount = 10000;
    }
    return req.get({
      uri: "" + uri + "/" + fromIndex + "/_search",
      qs: {
        size: docsCount
      }
    }, function(err, res) {
      var j;
      if (!err) {
        j = JSON.parse(res.body);
        j = j.hits.hits.map(function(m) {
          return map(m);
        });
        return bulk(uri, toIndex, j, done);
      } else {
        return done(err);
      }
    });
  };

  copy = function(uri, fromIndex, toIndex, done) {
    return map(uri, fromIndex, toIndex, null, (function(m) {
      return m;
    }), done);
  };

  getIndex = function(opts, done) {
    return _r_oper({
      uri: opts.uri,
      index: opts.index,
      method: "get"
    }, done);
  };

  deleteIndex = function(opts, done) {
    return _r_oper({
      uri: opts.uri,
      index: opts.index,
      method: "delete"
    }, done);
  };

  createIndex = function(opts, done) {
    var settings;
    settings = opts.settings;
    if (!settings) {
      settings = JSON.parse(fs.readFileSync(opts.settingsPath, "utf-8"));
    }
    return _r_oper({
      uri: opts.uri,
      index: opts.index,
      method: "post",
      body: settings
    }, done);
  };

  bkp = function(opts, done) {
    return async.waterfall([
      function(ck) {
        return deleteIndex(opts, ck);
      }, function(ck) {
        return createIndex(opts, ck);
      }, function(ck) {
        return copy(opts, ck);
      }
    ], done);
  };

  query = function(opts, body, done) {
    var params;
    params = extend({
      body: body
    }, opts);
    if (!opts.id) {
      params.oper = "_search";
    }
    return _r_oper(params, done);
  };

  count = function(opts, done) {
    var params;
    params = extend({}, opts);
    params.oper = "_count";
    if (params.body && params.body.query) {
      params.body = params.body.query;
    }
    return _r_oper(params, function(err, data) {
      if (!err) {
        data = {
          count: data.count
        };
      }
      return done(err, data);
    });
  };

  _r_oper = function(params, done) {
    var index, opts;
    opts = {
      uri: params.uri
    };
    if (opts.uri == null) {
      opts.uri = _config.uri;
    }
    index = params.index;
    if (params.index_prefix) {
      index = params.index_prefix + "." + index;
    }
    if (index) {
      opts.uri += '/' + index;
    }
    if (params.type) {
      opts.uri += '/' + params.type;
    }
    if (params.oper) {
      opts.uri += '/' + params.oper;
    }
    if (params.id) {
      opts.uri += '/' + params.id;
    }
    /* body*/

    if (typeof params.body === "object") {
      opts.json = params.body;
    } else {
      opts.body = params.body;
    }
    /* method*/

    if (params.method) {
      opts.method = params.method;
    }
    console.log(opts);
    return req(opts, function(err, res) {
      var e;
      if (!err && res.body) {
        res = res.body;
        try {
          if (typeof res === "string") {
            res = JSON.parse(res);
          }
        } catch (_error) {
          e = _error;
          done(res);
          return;
        }
        if (!res.error) {
          return done(err, res);
        } else {
          return done(res.error);
        }
      } else {
        return done(err);
      }
    });
  };

  exports.setConfig = setConfig;

  exports.createIndex = createIndex;

  exports.deleteIndex = deleteIndex;

  exports.getIndex = getIndex;

  exports.copy = copy;

  exports.bulk = bulk;

  exports.map = map;

  exports.bkp = bkp;

  exports.query = query;

  exports.count = count;

}).call(this);
